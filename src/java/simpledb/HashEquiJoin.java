package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc tdMerged;
    private Tuple tuple1 = null;
    private Tuple tuple2 = null;
    private HashMap<Object, ArrayList<Tuple>> dataMap = new HashMap<Object, ArrayList<Tuple>>();
    public final static int MAP_SIZE = 20000;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.joinPredicate = p;
    	this.child1 = child1;
    	this.child2 = child2;
    	this.tdMerged = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.tdMerged;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
    	return this.child1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return this.child2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }
    
    
    private boolean dataMapLoad() throws DbException, TransactionAbortedException {
    	int count = 0;
        dataMap.clear();   
        while (child1.hasNext()) {
            tuple1 = child1.next();
            ArrayList<Tuple> arrList = dataMap.get(tuple1.getField(joinPredicate.getField1()));
            if (arrList == null) {
                arrList = new ArrayList<Tuple>();
                dataMap.put(tuple1.getField(joinPredicate.getField1()), arrList);
            }
            arrList.add(tuple1);
            if (count++ == MAP_SIZE) {
                return true;
            }
        }
        return count > 0;
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	child1.open();
    	child2.open();
    	dataMapLoad();
    	super.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    	this.tuple1 = null;
    	this.tuple2 = null;
    	this.listIt = null;
    	this.dataMap.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;
    
    private Tuple listAction() throws TransactionAbortedException, DbException {
        tuple1 = listIt.next();
        int numField1 = tuple1.getTupleDesc().numFields();
        int numField2 = tuple2.getTupleDesc().numFields();
        Tuple tuple = new Tuple(tdMerged);
        for (int i = 0; i < numField1; i++) {
            tuple.setField(i, tuple1.getField(i));
        }
        for (int j = 0; j < numField2; j++) {
            tuple.setField(numField1 + j, tuple2.getField(j));
        }
        return tuple;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	if (listIt != null && listIt.hasNext()) {
    		return listAction();
    	}
    	while (child2.hasNext()) {
    		tuple2 = child2.next();
    		ArrayList<Tuple> list = dataMap.get(tuple2.getField(joinPredicate.getField2()));
    		if (list == null) {
    			continue;
    		}
    		listIt = list.iterator();
    		return listAction();
    	}
    	child2.rewind();
    	if (dataMapLoad()) {
    		return fetchNext();
    	}
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.child1 = children[0];
    	this.child2 = children[1];
    }
    
}