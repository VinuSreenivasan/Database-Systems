1. Describe any design decisions you made, including your deadlock detection policy, locking granularity, etc.
	
	src/simpledb/Bufferpool.java
		To implement locking machanism, we have implemented two concurrent maps for storing transactions and locks
		respectively. With two maps which can retrive the needed information was easier to use. First map used an
		array list of page ids for transaction and the second map maintains the information of all locks for a pageid.
		For eviction policy, we have implement a machanism to remove a random page which is not dirty. Previously we were
		using LRU approach for eviction, but for this project we are following this approach as mentioned in the project
		description page. For deadlock conditions we have used a timeout policy which aborts the transaction after a random
		time. We will wait for the locks to get released whenever the timeout happens. If the locks are released, a signal
		is sent and the transaction can acquire them. If not we just send a transactionAborted exception, which will be
		handled. 
	
2. Discuss and justify any changes you made to the API.
	No, We didnâ€™t change any given APIs.
	
3. Describe any missing or incomplete elements of your code.
	Completed all the exercises given in the project description and ran the Junit tests accordingly to verify the implementations.
	
4. Describe how long you spent on the project, and whether there was anything you found particularly difficult or confusing.
	Overall we have spent around 20-22 hrs for proj5. We have spent most of our time debugging the lock error we were getting.
	It was very hard to debug because it wasn't happening all the time.